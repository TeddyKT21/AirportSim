// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ServerDal;

#nullable disable

namespace ServerDal.Migrations
{
    [DbContext(typeof(AirportDbContext))]
    partial class AirportDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AirportSimCore.Models.Dtos.LegLogDto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("FlightId")
                        .HasColumnType("int");

                    b.Property<int>("LegId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("FlightId");

                    b.HasIndex("LegId");

                    b.ToTable("LegLogs");
                });

            modelBuilder.Entity("AirportSimCore.Models.Dtos.TerminalLegConnection", b =>
                {
                    b.Property<int>("TerminalLegStartId")
                        .HasColumnType("int");

                    b.Property<int>("TerminalLegContinueId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDepartingConnection")
                        .HasColumnType("bit");

                    b.HasKey("TerminalLegStartId", "TerminalLegContinueId");

                    b.HasIndex("TerminalLegContinueId");

                    b.HasIndex("TerminalLegStartId", "TerminalLegContinueId", "IsDepartingConnection")
                        .IsUnique();

                    b.ToTable("TerminalLegConnection");
                });

            modelBuilder.Entity("AirportSimCore.Models.Dtos.TerminalLegDto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<bool>("IsArrivingStart")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDepartingStart")
                        .HasColumnType("bit");

                    b.Property<int>("LegNumber")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Legs");
                });

            modelBuilder.Entity("AirportSimCore.Models.Flight", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AirLine")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("FlightNumber")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeparting")
                        .HasColumnType("bit");

                    b.Property<DateTime>("MadeContactAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("NumberOfPassengers")
                        .HasColumnType("int");

                    b.Property<string>("PlaneModel")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Flights");
                });

            modelBuilder.Entity("AirportSimCore.Models.Dtos.LegLogDto", b =>
                {
                    b.HasOne("AirportSimCore.Models.Flight", "Flight")
                        .WithMany()
                        .HasForeignKey("FlightId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AirportSimCore.Models.Dtos.TerminalLegDto", "Leg")
                        .WithMany()
                        .HasForeignKey("LegId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Flight");

                    b.Navigation("Leg");
                });

            modelBuilder.Entity("AirportSimCore.Models.Dtos.TerminalLegConnection", b =>
                {
                    b.HasOne("AirportSimCore.Models.Dtos.TerminalLegDto", "TerminalLegContinue")
                        .WithMany()
                        .HasForeignKey("TerminalLegContinueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AirportSimCore.Models.Dtos.TerminalLegDto", "TerminalLegStart")
                        .WithMany("NextLegConnections")
                        .HasForeignKey("TerminalLegStartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TerminalLegContinue");

                    b.Navigation("TerminalLegStart");
                });

            modelBuilder.Entity("AirportSimCore.Models.Dtos.TerminalLegDto", b =>
                {
                    b.Navigation("NextLegConnections");
                });
#pragma warning restore 612, 618
        }
    }
}
